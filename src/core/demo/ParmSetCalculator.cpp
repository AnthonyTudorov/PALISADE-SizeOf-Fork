/*
 * @author  TPOC: palisade@njit.edu
 *
 * @copyright Copyright (c) 2017, New Jersey Institute of Technology (NJIT)
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include "math/backend.h"
using namespace std;
using namespace lbcrypto;

int
main()
{
	BigBinaryInteger	One(1);
	BigBinaryInteger	q;
	BigBinaryInteger	ru;

	cout << "The values generated by this program are used to populate the static parameters in elemparmfactory.cpp" << endl << endl;

	cout << "N = 1024" << endl;
	q = (One<<35) - (One<<14) + (One<<11) + 1;
	cout << "q = " << q << endl;
	ru = RootOfUnity(1024,q);
	cout << "root = " << ru << endl;

	cout << "N = 2048" << endl;
	q = (One<<60) - (One<<14) + 1;
	cout << "q = " << q << endl;
	ru = RootOfUnity(2048,q);
	cout << "root = " << ru << endl;

	cout << "N = 4096" << endl;
	q = (One<<116) - (One<<18) + 1;
	cout << "q = " << q << endl;
	ru = RootOfUnity(4096,q);
	cout << "root = " << ru << endl;

	cout << "N = 8192" << endl;
	q = (One<<226) - (One<<26) + 1;
	cout << "q = " << q << endl;
	ru = RootOfUnity(8192,q);
	cout << "root = " << ru << endl;

	cout << "N = 16384" << endl;
	q = (One<<435) - (One<<33) + 1;
	cout << "q = " << q << endl;
	ru = RootOfUnity(16384,q);
	cout << "root = " << ru << endl;

}
