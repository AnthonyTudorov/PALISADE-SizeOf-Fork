###############################################################
#
#  First, choose a C++ compiler, and set compiler flags.
#  This is done by setting the variables CXX and CXXFLAGS.
#
###############################################################

PHONE_TMP_DIR=/data/local/tmp/test_ntl

TARGET_ARCH_ABI=$(ANDROID_ABI)

ifeq ($(TARGET_ARCH_ABI),arm64-v8a)
TOOLCHAIN_PREFIX=aarch64-linux-android
# When building with Android Studio for arm64-v8a build system automatically
# raises version to android-26 if it's lower. Using same behavior here.
PLATFORM=android-26
PLATFORM_DIR=$(NDK_DIR)/platforms/$(PLATFORM)/arch-arm64
else ifeq ($(TARGET_ARCH_ABI),x86_64)
TOOLCHAIN_PREFIX=x86_64-linux-android
PLATFORM=android-26
PLATFORM_DIR=$(NDK_DIR)/platforms/$(PLATFORM)/arch-x86_64
else
TOOLCHAIN_PREFIX=arm-linux-androideabi
PLATFORM=android-19
PLATFORM_DIR=$(NDK_DIR)/platforms/$(PLATFORM)/arch-arm
endif

CXX=$(TOOLCHAIN_PREFIX)-g++
# A C++ compiler, e.g., g++, CC, xlC

CXXFLAGS=-g -O2
# Flags for the C++ compiler

CXXAUTOFLAGS= -std=c++11 -pthread 
# Flags for the C++ compiler, automatically generated by configuration script


AR=$(TOOLCHAIN_PREFIX)-ar
# command to make a library

ARFLAGS=ruv
# arguments for AR

RANLIB=$(TOOLCHAIN_PREFIX)-ranlib
# set to echo if you want to disable it completely

LDFLAGS=
# libraries for linking C++ programs

LDLIBS=-lm
# libraries for linking C++ programs

CPPFLAGS=
# arguments for the C preprocessor

LIBTOOL=libtool
# libtool command

DEF_PREFIX=/usr/local

PREFIX=$(DEF_PREFIX)
LIBDIR=$(PREFIX)/lib
INCLUDEDIR=$(PREFIX)/include
DOCDIR=$(PREFIX)/share/doc
# where to install NTL

###############################################################
#
#  Second, if you want to use GMP (the GNU Multi-Precision library),
#  define the variables GMP_OPT_INCDIR, GMP_OPT_LIBDIR, GMP_OPT_LIB below.
#  You also will have to set either NTL_GMP_LIP or NTL_GMP_HACK
#  in the config.h file.
#
#  Using GMP can lead to significant performance gains on some
#  platforms.  You can obtain GMP from http://www.swox.com/gmp.
#  Once you unpack it into a directory, just execute
#     ./configure; make
#  in that directory.
#
###############################################################


GMP_PREFIX=../../gmp/$(TARGET_ARCH_ABI)

GMP_INCDIR=$(GMP_PREFIX)
# directory containing gmp.h if using GMP 

GMP_LIBDIR=$(GMP_PREFIX)
# directory containing libgmp.a if using GMP 

GMP_OPT_INCDIR= -I$(GMP_INCDIR) # GMPI
GMP_OPT_LIBDIR= -L$(GMP_LIBDIR) # GMPL
GMP_OPT_LIB= -lgmp # GMP
# uncomment these if using GMP


###############################################################
#
#  Third, if you want to use gf2x (a library for fast
#  multiplication over GF(2)[X]), you need to
#  define the variables GF2X_OPT_INCDIR, GF2X_OPT_LIBDIR, GF2X_OPT_LIB below.
#  You also will have to set NTL_GF2X_LIB 
#  in the config.h file.
#
###############################################################

GF2X_PREFIX=$(DEF_PREFIX)

GF2X_INCDIR=$(GF2X_PREFIX)/include
# directory containing gf2x.h if using gf2x

GF2X_LIBDIR=$(GF2X_PREFIX)/lib
# directory containing libgf2x.a

GF2X_OPT_INCDIR=# -I$(GF2X_INCDIR) # GF2X
GF2X_OPT_LIBDIR=# -L$(GF2X_LIBDIR) # GF2X
GF2X_OPT_LIB=# -lgf2x # GF2X
# uncomment these if using gf2x


###############################################################
#
# Fourth, if you do not want to run the wizard that automagically
# sets some performace related flags in config.h, set the flag below.
#
###############################################################


WIZARD=off
# Set to off if you want to bypass the wizard; otherwise, set to on.


#################################################################
#
#  That's it!  You can ignore everything else in this file!
#
#################################################################



# object files
OBJ=FFT.o FacVec.o GF2.o GF2E.o GF2EX.o GF2EXFactoring.o GF2X.o GF2X1.o  \
	GF2XFactoring.o GF2XVec.o GetTime.o GetPID.o HNF.o ctools.o LLL.o LLL_FP.o  \
	LLL_QP.o LLL_RR.o LLL_XD.o RR.o WordVector.o ZZ.o ZZVec.o ZZX.o ZZX1.o  \
	ZZXCharPoly.o ZZXFactoring.o ZZ_p.o ZZ_pE.o ZZ_pEX.o ZZ_pEXFactoring.o ZZ_pX.o  \
	ZZ_pX1.o ZZ_pXCharPoly.o ZZ_pXFactoring.o fileio.o lip.o lzz_p.o lzz_pE.o  \
	lzz_pEX.o lzz_pEXFactoring.o lzz_pX.o lzz_pX1.o lzz_pXCharPoly.o  \
	lzz_pXFactoring.o mat_GF2.o mat_GF2E.o mat_RR.o mat_ZZ.o mat_ZZ_p.o mat_ZZ_pE.o  \
	mat_lzz_p.o mat_lzz_pE.o mat_poly_ZZ.o mat_poly_ZZ_p.o mat_poly_lzz_p.o  \
	quad_float.o tools.o vec_GF2.o vec_GF2E.o vec_RR.o vec_ZZ.o vec_ZZ_p.o  \
	vec_ZZ_pE.o vec_lzz_p.o vec_lzz_pE.o xdouble.o G_LLL_FP.o G_LLL_QP.o G_LLL_XD.o  \
	G_LLL_RR.o thread.o BasicThreadPool.o MatPrime.o 

# library source files
SRC=FFT.cpp FacVec.cpp GF2.cpp GF2E.cpp GF2EX.cpp GF2EXFactoring.cpp GF2X.cpp  \
	GF2X1.cpp GF2XFactoring.cpp GF2XVec.cpp HNF.cpp ctools.cpp LLL.cpp LLL_FP.cpp  \
	LLL_QP.cpp LLL_RR.cpp LLL_XD.cpp RR.cpp WordVector.cpp ZZ.cpp ZZVec.cpp ZZX.cpp  \
	ZZX1.cpp ZZXCharPoly.cpp ZZXFactoring.cpp ZZ_p.cpp ZZ_pE.cpp ZZ_pEX.cpp  \
	ZZ_pEXFactoring.cpp ZZ_pX.cpp ZZ_pX1.cpp ZZ_pXCharPoly.cpp ZZ_pXFactoring.cpp  \
	fileio.cpp lip.cpp lzz_p.cpp lzz_pE.cpp lzz_pEX.cpp lzz_pEXFactoring.cpp  \
	lzz_pX.cpp lzz_pX1.cpp lzz_pXCharPoly.cpp lzz_pXFactoring.cpp mat_GF2.cpp  \
	mat_GF2E.cpp mat_RR.cpp mat_ZZ.cpp mat_ZZ_p.cpp mat_ZZ_pE.cpp mat_lzz_p.cpp  \
	mat_lzz_pE.cpp mat_poly_ZZ.cpp mat_poly_ZZ_p.cpp mat_poly_lzz_p.cpp  \
	quad_float.cpp tools.cpp vec_GF2.cpp vec_GF2E.cpp vec_RR.cpp vec_ZZ.cpp  \
	vec_ZZ_p.cpp vec_ZZ_pE.cpp vec_lzz_p.cpp vec_lzz_pE.cpp xdouble.cpp  \
	G_LLL_FP.cpp G_LLL_QP.cpp G_LLL_XD.cpp G_LLL_RR.cpp thread.cpp  \
	BasicThreadPool.cpp MatPrime.cpp

# library source files that are header files

SINC = c_lip_impl.h g_lip_impl.h





# library header files
INCL=FFT.h FacVec.h GF2.h GF2E.h GF2EX.h GF2EXFactoring.h GF2X.h  \
	GF2XFactoring.h GF2XVec.h HNF.h ctools.h LLL.h RR.h WordVector.h  \
	ZZ.h ZZ_limbs.h sp_arith.h ZZVec.h ZZX.h ZZXFactoring.h ZZ_p.h ZZ_pE.h ZZ_pEX.h  \
	ZZ_pEXFactoring.h ZZ_pX.h ZZ_pXFactoring.h fileio.h lip.h lzz_p.h lzz_pE.h  \
	lzz_pEX.h lzz_pEXFactoring.h lzz_pX.h lzz_pXFactoring.h mat_GF2.h mat_GF2E.h  \
	mat_RR.h mat_ZZ.h mat_ZZ_p.h mat_ZZ_pE.h mat_lzz_p.h mat_lzz_pE.h mat_poly_ZZ.h  \
	mat_poly_ZZ_p.h mat_poly_lzz_p.h matrix.h pair.h vector.h pair_GF2EX_long.h  \
	pair_GF2X_long.h pair_ZZX_long.h pair_ZZ_pEX_long.h pair_ZZ_pX_long.h  \
	pair_lzz_pEX_long.h pair_lzz_pX_long.h quad_float.h tools.h vec_GF2.h  \
	vec_GF2E.h vec_GF2XVec.h vec_RR.h vec_ZZ.h vec_ZZVec.h vec_ZZ_p.h vec_ZZ_pE.h  \
	vec_double.h vec_long.h vec_lzz_p.h vec_lzz_pE.h vec_quad_float.h vec_vec_GF2.h  \
	vec_vec_GF2E.h vec_vec_RR.h vec_vec_ZZ.h vec_vec_ZZ_p.h vec_vec_ZZ_pE.h  \
	vec_vec_long.h vec_vec_lzz_p.h vec_vec_lzz_pE.h vec_xdouble.h xdouble.h  \
	config.h version.h def_config.h new.h vec_ulong.h vec_vec_ulong.h SmartPtr.h  \
	Lazy.h LazyTable.h thread.h  BasicThreadPool.h MatPrime.h


# test data
TD=BerlekampTestIn BerlekampTestOut CanZassTestIn CanZassTestOut   \
	ZZXFacTestIn ZZXFacTestOut MoreFacTestIn LLLTestIn LLLTestOut RRTestIn RRTestOut   \
	MatrixTestIn MatrixTestOut CharPolyTestIn    \
	CharPolyTestOut QuadTestIn QuadTestOut


# test source files
TS=QuickTest.cpp ZZTest.cpp BerlekampTest.cpp CanZassTest.cpp ZZXFacTest.cpp  \
	MoreFacTest.cpp LLLTest.cpp subset.cpp MatrixTest.cpp mat_lzz_pTest.cpp  \
	CharPolyTest.cpp RRTest.cpp QuadTest.cpp GF2XTest.cpp GF2EXTest.cpp  \
	BitMatTest.cpp ZZ_pEXTest.cpp lzz_pEXTest.cpp Timing.cpp ThreadTest.cpp  \
	ExceptionTest.cpp

# scripts

SCRIPTS1=MakeGetTime MakeGetPID MakeCheckCLZL MakeCheckLL TestScript dosify unixify RemoveProg AndroidRemoveProg
SCRIPTS2=$(SCRIPTS1) configure DoConfig mfile cfile ppscript

SCRIPTS=$(SCRIPTS2)

# auxilliary source

MD=MakeDesc.cpp MakeDescAux.cpp newnames.cpp gen_gmp_aux.cpp CheckPCLMUL.cpp
GT=GetTime0.cpp GetTime1.cpp GetTime2.cpp GetTime3.cpp GetTime4.cpp GetTime5.cpp TestGetTime.cpp
GP=GetPID1.cpp GetPID2.cpp TestGetPID.cpp
CH=CheckCLZL.cpp CheckCLZLAux.cpp CheckLL.cpp CheckLLAux.cpp


FEATURES=ALIGNED_ARRAY BUILTIN_CLZL LL_TYPE SSSE3 AVX PCLMUL AVX2 FMA \
	COPY_TRAITS1 COPY_TRAITS2

# documentation


D01=copying.txt BasicThreadPool.txt GF2.txt GF2E.txt GF2EX.txt GF2EXFactoring.txt GF2X.txt
D02=$(D01) GF2XFactoring.txt GF2XVec.txt HNF.txt Lazy.txt LazyTable.txt LLL.txt RR.txt SmartPtr.txt
D03=$(D02) ZZ.txt ZZVec.txt ZZX.txt ZZXFactoring.txt ZZ_p.txt ZZ_pE.txt
D04=$(D03) ZZ_pEX.txt ZZ_pEXFactoring.txt ZZ_pX.txt ZZ_pXFactoring.txt
D05=$(D04) conversions.txt flags.txt lzz_p.txt lzz_pE.txt lzz_pEX.txt
D06=$(D05) lzz_pEXFactoring.txt lzz_pX.txt lzz_pXFactoring.txt mat_GF2.txt
D07=$(D06) mat_GF2E.txt mat_RR.txt mat_ZZ.txt mat_ZZ_p.txt mat_ZZ_pE.txt
D08=$(D07) mat_lzz_p.txt mat_lzz_pE.txt mat_poly_ZZ.txt mat_poly_ZZ_p.txt
D09=$(D08) mat_poly_lzz_p.txt matrix.txt pair.txt vector.txt
D10=$(D09) quad_float.txt sedscript.txt tools.txt vec_GF2.txt
D11=$(D10) vec_GF2E.txt vec_RR.txt vec_ZZ.txt vec_ZZ_p.txt vec_ZZ_pE.txt
D12=$(D11) vec_lzz_p.txt vec_lzz_pE.txt xdouble.txt names.txt
D13=$(D12) tour-ack.html tour-intro.html tour-time.html tour-changes.html
D14=$(D13) tour-modules.html tour-unix.html tour-examples.html
D15=$(D14) tour-roadmap.html tour-win.html tour-impl.html tour-struct.html
D16=$(D15) tour.html tour-ex1.html tour-ex2.html tour-ex3.html tour-ex4.html
D17=$(D16) tour-ex5.html tour-ex6.html arrow1.gif arrow2.gif arrow3.gif
D18=$(D17) tour-gmp.html tour-gf2x.html tour-tips.html config.txt version.txt

TX01=GF2.txt GF2E.txt GF2EX.txt GF2EXFactoring.txt GF2X.txt GF2XFactoring.txt
TX02=GF2XVec.txt HNF.txt Lazy.txt LazyTable.txt LLL.txt RR.txt SmartPtr.txt ZZ.txt ZZVec.txt ZZX.txt ZZXFactoring.txt
TX03=ZZ_p.txt ZZ_pE.txt ZZ_pEX.txt ZZ_pEXFactoring.txt ZZ_pX.txt ZZ_pXFactoring.txt
TX04=lzz_p.txt lzz_pE.txt lzz_pEX.txt lzz_pEXFactoring.txt lzz_pX.txt
TX05=lzz_pXFactoring.txt mat_GF2.txt mat_GF2E.txt mat_RR.txt mat_ZZ.txt mat_ZZ_p.txt
TX06=mat_ZZ_pE.txt mat_lzz_p.txt mat_lzz_pE.txt mat_poly_ZZ.txt mat_poly_ZZ_p.txt
TX07=mat_poly_lzz_p.txt matrix.txt pair.txt quad_float.txt tools.txt vec_GF2.txt
TX08=vec_GF2E.txt vec_RR.txt vec_ZZ.txt vec_ZZ_p.txt vec_ZZ_pE.txt vec_lzz_p.txt
TX09=vec_lzz_pE.txt vector.txt version.txt xdouble.txt BasicThreadPool.txt

TXFILES=$(TX01) $(TX02) $(TX03) $(TX04) $(TX05) $(TX06) $(TX07) $(TX08) $(TX09) 

HT01=GF2.cpp.html GF2E.cpp.html GF2EX.cpp.html GF2EXFactoring.cpp.html GF2X.cpp.html GF2XFactoring.cpp.html
HT02=GF2XVec.cpp.html HNF.cpp.html Lazy.cpp.html LazyTable.cpp.html LLL.cpp.html RR.cpp.html SmartPtr.cpp.html ZZ.cpp.html ZZVec.cpp.html ZZX.cpp.html ZZXFactoring.cpp.html
HT03=ZZ_p.cpp.html ZZ_pE.cpp.html ZZ_pEX.cpp.html ZZ_pEXFactoring.cpp.html ZZ_pX.cpp.html ZZ_pXFactoring.cpp.html
HT04=lzz_p.cpp.html lzz_pE.cpp.html lzz_pEX.cpp.html lzz_pEXFactoring.cpp.html lzz_pX.cpp.html
HT05=lzz_pXFactoring.cpp.html mat_GF2.cpp.html mat_GF2E.cpp.html mat_RR.cpp.html mat_ZZ.cpp.html mat_ZZ_p.cpp.html
HT06=mat_ZZ_pE.cpp.html mat_lzz_p.cpp.html mat_lzz_pE.cpp.html mat_poly_ZZ.cpp.html mat_poly_ZZ_p.cpp.html
HT07=mat_poly_lzz_p.cpp.html matrix.cpp.html pair.cpp.html quad_float.cpp.html tools.cpp.html vec_GF2.cpp.html
HT08=vec_GF2E.cpp.html vec_RR.cpp.html vec_ZZ.cpp.html vec_ZZ_p.cpp.html vec_ZZ_pE.cpp.html vec_lzz_p.cpp.html
HT09=vec_lzz_pE.cpp.html vector.cpp.html version.cpp.html xdouble.cpp.html BasicThreadPool.cpp.html

HTFILES=$(HT01) $(HT02) $(HT03) $(HT04) $(HT05) $(HT06) $(HT07) $(HT08) $(HT09)


DOC = $(D18) $(HTFILES)



# test program executables

PROG1=QuickTest BerlekampTest CanZassTest ZZXFacTest MoreFacTest LLLTest  BitMatTest
PROG2=$(PROG1) MatrixTest CharPolyTest RRTest QuadTest 
PROG3=$(PROG2) GF2XTest GF2EXTest subset ZZ_pEXTest lzz_pEXTest Timing ThreadTest
PROGS = $(PROG3)

# things to save to a tar file

SFI1=makefile $(SRC) $(SINC) $(SCRIPTS) $(MD) $(GT) $(GP) $(CH) $(TS) $(TD) mach_desc.win 
SFI2=$(SFI1) MulTimeTest.cpp Poly1TimeTest.cpp Poly2TimeTest.cpp Poly3TimeTest.cpp GF2XTimeTest.cpp  
SFI3=$(SFI2) InitSettings.cpp DispSettings.cpp  WizardAux Wizard def_makefile
SFILES=$(SFI3)


#################################################################
#
#  Rules for compiling the library
#
#################################################################


NTL_INCLUDE = -I../include -I.
# NTL needs this to find its include files

#####--sysroot=$(PLATFORM_DIR) 
#####-isystem $(NDK_DIR)/sources/android/support/include 
#####-isystem $(NDK_DIR)/sources/cxx-stl/llvm-libc++abi/include 
CFLAGS = -I$(PLATFORM_DIR)/usr/include -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-short-enums -fomit-frame-pointer \
    -fomit-frame-pointer -fstrict-aliasing -funswitch-loops -finline-limit=300 \
    -Wno-psabi -Wa,--noexecstack \
    -isystem $(NDK_DIR)/sysroot/usr/include/x86_64-linux-android \
    -isystem $(NDK_DIR)/sources/cxx-stl/llvm-libc++/include \
    -isystem $(NDK_DIR)/sources/cxx-stl/system/include 

TARGET_CRTBEGIN_DYNAMIC_O = $(PLATFORM_DIR)/usr/lib64/crtbegin_dynamic.o
TARGET_CRTEND_DYNAMIC_O = $(PLATFORM_DIR)/usr/lib64/crtend_android.o

TARGET_LIBGCC := $(shell $(CXX) -print-libgcc-file-name)
TARGET_LDFLAGS := -Wl,-rpath-link=$(PLATFORM_DIR)/usr/lib64

# cppkonsultants: commented out
# TARGET_CXXLIBS := $(shell $(CXX) -print-file-name=libstdc++.a)
# TARGET_CXXLIBS += $(shell $(CXX) -print-file-name=libsupc++.a)
# TARGET_CXXLIBS += -lstdc++ -lsupc++

PRIVATE_CLIBS = -lc -lm
NTL_INCLUDE = -I../include -I.

ifeq ($(TARGET_ARCH_ABI),armeabi-v7a)
    CFLAGS += -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16 -mthumb
    TARGET_LDFLAGS += -Wl,-dynamic-linker,/system/bin/linker -Wl,--fix-cortex-a8 -Wl,--no-undefined -Wl,-z,noexecstack
else ifeq ($(TARGET_ARCH_ABI),arm64-v8a)
    CFLAGS +=
    TARGET_LDFLAGS += -Wl,-dynamic-linker,/system/bin/linker64 -Wl,--no-undefined -Wl,-z,noexecstack -Wl,-m,aarch64linux
else ifeq ($(TARGET_ARCH_ABI),x86_64)
    CFLAGS += -march=x86-64 -msse4.2 -mpopcnt -m64 -mtune=intel
    TARGET_LDFLAGS += -Wl,-dynamic-linker,/system/bin/linker64 -Wl,--no-undefined -Wl,-z,noexecstack -Wl,-m,x86_64linux
else
    CFLAGS += -march=armv5te -mtune=xscale -msoft-float -mthumb
    TARGET_LDFLAGS += -Wl,-dynamic-linker,/system/bin/linker -Wl,--no-undefined -Wl,-z,noexecstack
endif
TARGET_LDLIBS += $(NDK_DIR)/sources/cxx-stl/llvm-libc++/libs/$(TARGET_ARCH_ABI)/libc++_static.a $(NDK_DIR)/sources/cxx-stl/llvm-libc++/libs/$(TARGET_ARCH_ABI)/libc++abi.a $(NDK_DIR)/sources/cxx-stl/llvm-libc++/libs/$(TARGET_ARCH_ABI)/libandroid_support.a -latomic

CFLAGS += $(CXXFLAGS) -frtti -fexceptions -DANDROID -fvisibility=hidden

COMPILE = $(CXX) $(NTL_INCLUDE) \
    -Bdynamic \
    -Wl,--gc-sections \
    -Wl,-z,nocopyreloc \
    --sysroot=$(NDK_DIR)/sysroot \
    $(CXXAUTOFLAGS) \
    $(CFLAGS) \
    -c

LINKER_CMD = $(CXX) $(NTL_INCLUDE) \
    -Bdynamic \
    -Wl,--gc-sections \
    -Wl,-z,nocopyreloc \
    -pie \
    --sysroot=$(PLATFORM_DIR) \
    $(CFLAGS) \
    $(TARGET_LDFLAGS)

LINK_LIBRARIES = $(TARGET_LDLIBS) \
    $(TARGET_LIBGCC) \
    $(TARGET_CXXLIBS) \
    $(PRIVATE_CLIBS)

LINK = $(LINKER_CMD) $(LINK_LIBRARIES)

# COMPILE = $(CXX) $(NTL_INCLUDE) $(CPPFLAGS) $(CXXAUTOFLAGS) $(CXXFLAGS) -c

# LINK = $(CXX) $(NTL_INCLUDE) $(CPPFLAGS) $(CXXAUTOFLAGS) $(CXXFLAGS) $(LDFLAGS)



# 'make all' does a complete make, including all setup.
# It also creates the file 'all', which means you should
# run 'make clobber' before running 'make' or 'make all'
# again.

all:
	make setup1
	make setup2
	make setup3
	make setup4
	make ntl.a
	touch all


# setup1 generates the file ../incluse/NTL/mach_desc.h

setup1:
	$(COMPILE) MakeDesc.cpp
	$(COMPILE) MakeDescAux.cpp
	$(LINK) -o MakeDesc MakeDesc.o MakeDescAux.o
	adb shell mkdir -p $(PHONE_TMP_DIR)
	adb push MakeDesc $(PHONE_TMP_DIR)/MakeDesc
	adb shell "cd $(PHONE_TMP_DIR) && $(PHONE_TMP_DIR)/MakeDesc"
	adb pull $(PHONE_TMP_DIR)/mach_desc.h
	mv mach_desc.h ../include/NTL/mach_desc.h


# setup2 does some dynamic checks for GetTime, GetPID, __builtin_clzl, and LL types 

setup2:
	adb shell mkdir -p $(PHONE_TMP_DIR)
	sh MakeGetTime "$(COMPILE)" "$(LINK)" "$(PHONE_TMP_DIR)"
	sh MakeGetPID "$(COMPILE)" "$(LINK)" "$(PHONE_TMP_DIR)"
	#sh MakeCheckCLZL "$(COMPILE)" "$(LINK)" "$(PHONE_TMP_DIR)"
	#sh MakeCheckLL "$(COMPILE)" "$(LINK)" "$(PHONE_TMP_DIR)"
	sh MakeCheckFeatures "$(FEATURES)" "$(COMPILE)" "$(LINK)" "$(PHONE_TMP_DIR)"

# setup3 generates the file ../include/NTL/gmp_aux.h
# The file ../include/NTL/gmp_aux.h is included in ../include/NTL/lip.h
# when NTL_GMP_LIP is set.
# When this flag is not set, an empty files produced.

setup3:
	$(COMPILE) $(GMP_OPT_INCDIR) gen_gmp_aux.cpp
	$(LINK) -o gen_gmp_aux gen_gmp_aux.o $(GMP_OPT_LIBDIR) $(GMP_OPT_LIB)
	adb shell mkdir -p $(PHONE_TMP_DIR)
	adb push gen_gmp_aux $(PHONE_TMP_DIR)/gen_gmp_aux
	adb push $(GMP_PREFIX)/libgmp.so $(PHONE_TMP_DIR)/libgmp.so
	adb shell "cd $(PHONE_TMP_DIR) && LD_LIBRARY_PATH=$(PHONE_TMP_DIR) ./gen_gmp_aux 2>/dev/null" > ../include/NTL/gmp_aux.h

# setup4 runs the wizard

setup4:
	sh Wizard $(WIZARD)


ntl.a:	$(OBJ) 
	$(AR) $(ARFLAGS) ntl.a $(OBJ) #LSTAT
	- $(RANLIB) ntl.a #LSTAT
# 	$(LIBTOOL) --tag=CXX --mode=link $(LINK) -o libntl.la $(OBJ:.o=.lo) $(GMP_OPT_LIBDIR) $(GMP_OPT_LIB) $(GF2X_OPT_LIBDIR) $(GF2X_OPT_LIB) $(LDLIBS) -rpath $(LIBDIR) -version-info `cat VERSION_INFO` #LSHAR

LCOMP= #LSTAT
# LCOMP=$(LIBTOOL) --tag=CXX --mode=compile #LSHAR

lip.o:	lip.cpp g_lip_impl.h c_lip_impl.h 
	$(LCOMP) $(COMPILE) $(GMP_OPT_INCDIR) lip.cpp

ctools.o:	ctools.cpp
	$(LCOMP) $(COMPILE) ctools.cpp


GetTime.o: GetTime.cpp 
	$(LCOMP) $(COMPILE) GetTime.cpp

GetPID.o: GetPID.cpp 
	$(LCOMP) $(COMPILE) GetPID.cpp

CheckPCLMUL: CheckPCLMUL.cpp
	$(LINK) -o  CheckPCLMUL CheckPCLMUL.cpp $(LDLIBS)

.cpp.o: 
	$(LCOMP) $(COMPILE) $(GF2X_OPT_INCDIR) $<

.c: 
	$(LINKER_CMD) -o $@ $< ntl.a $(LINK_LIBRARIES) $(GMP_OPT_LIBDIR) $(GMP_OPT_LIB) $(GF2X_OPT_LIBDIR) $(GF2X_OPT_LIB)
# 	$(LIBTOOL) --tag=CXX --mode=link $(LINK) -o $@ $< libntl.la #LSHAR

#################################################################
#
# Rule for running tests
# make check runs a series of tests
#
#################################################################

check:
	sh RemoveProg $(PROGS)
	adb shell mkdir -p $(PHONE_TMP_DIR)
	sh AndroidRemoveProg $(PHONE_TMP_DIR)/$(PROGS) 
	make QuickTest
	adb push QuickTest $(PHONE_TMP_DIR)/QuickTest
	adb shell $(PHONE_TMP_DIR)/QuickTest
	sh RemoveProg QuickTest
	sh AndroidRemoveProg $(PHONE_TMP_DIR)/QuickTest
	sh TestScript $(PHONE_TMP_DIR)

#################################################################
#
# Rule for installing
# make install just does a simple copy of the include file
#   and library.  The -p option is used to preserve file attributes.
#   This helps avoid some problems (especially when copying ntl.a).
#   Also, an attempt is made to make everything that is
#   installed readable by everyone.
#   
# make uninstall removes these files
#   
#################################################################




install:
	mkdir -p -m 755 $(INCLUDEDIR)
	rm -rf $(INCLUDEDIR)/NTL
	mkdir -m 755 $(INCLUDEDIR)/NTL
	cp -p ../include/NTL/*.h $(INCLUDEDIR)/NTL
	- chmod -R a+r $(INCLUDEDIR)/NTL
	mkdir -p -m 755 $(DOCDIR)
	rm -rf $(DOCDIR)/NTL
	mkdir -m 755 $(DOCDIR)/NTL
	cp -p ../doc/*.txt $(DOCDIR)/NTL
	cp -p ../doc/*.html $(DOCDIR)/NTL
	cp -p ../doc/*.gif $(DOCDIR)/NTL
	- chmod -R a+r $(DOCDIR)/NTL
	mkdir -p -m 755 $(LIBDIR)
	cp -p ntl.a $(LIBDIR)/libntl.a #LSTAT
	- chmod a+r $(LIBDIR)/libntl.a #LSTAT
# 	$(LIBTOOL) --mode=install cp -p libntl.la $(LIBDIR) #LSHAR


uninstall:
	rm -f $(LIBDIR)/libntl.a #LSTAT
# 	$(LIBTOOL) --mode=uninstall rm -f $(LIBDIR)/libntl.la #LSHAR
	rm -rf $(INCLUDEDIR)/NTL
	rm -rf $(DOCDIR)/NTL

#################################################################
#
#  Rules for cleaning up
#
#  make clobber removes *everything* created by make,
#    but it does not restore config.h to its default.
#
#  make clean tidies up a bit
#
#################################################################

clobber:	
	rm -f ntl.a mach_desc.h ../include/NTL/mach_desc.h  GetTime.cpp GetPID.cpp
	cp ../include/NTL/have_LL_no.h ../include/NTL/have_LL.h
	cp ../include/NTL/have_builtin_clzl_no.h ../include/NTL/have_builtin_clzl.h
	rm -f ../include/NTL/gmp_aux.h
	sh RemoveProg $(PROGS) MakeDesc TestGetTime TestGetPID gen_gmp_aux
#	sh AndroidRemoveProg $(PHONE_TMP_DIR)/$(PROGS) $(PHONE_TMP_DIR)/MakeDesc $(PHONE_TMP_DIR)/TestGetTime  $(PHONE_TMP_DIR)/MakeDesc $(PHONE_TMP_DIR)/TestGetPID $(PHONE_TMP_DIR)/gen_gmp_aux
	adb shell rm -r $(PHONE_TMP_DIR)
	rm -f *.o
	rm -rf small
	rm -f cfileout mfileout
	rm -rf .libs *.lo libntl.la
	rm -f all

clean:
	sh RemoveProg MakeDesc TestGetTime TestGetPID gen_gmp_aux
#	sh AndroidRemoveProg $(PHONE_TMP_DIR)/MakeDesc $(PHONE_TMP_DIR)/TestGetTime $(PHONE_TMP_DIR)/TestGetPID $(PHONE_TMP_DIR)/gen_gmp_aux
	adb shell rm -r $(PHONE_TMP_DIR)
	rm -f *.o 
	rm -rf small
# 	- $(LIBTOOL) --mode=clean rm -f libntl.la *.lo #LSHAR

#################################################################
#
#  Rules for making tar and zip files
#
#  make ppdoc creates pretty-printed versions of some documentation
#     - run before make package or make winpack
#
#  make package creates a tar.gz file suitable for Unix
#
#  make winpack creates a zip file suitable for Windows
#
#################################################################

ppdoc:
	sh ppscript "$(TXFILES)"

ppclean:
	rm -f ../doc/*.cpp


package:
	sh unixify "$(SFILES) DIRNAME WINDIR VERSION_INFO NOTES" "$(INCL)" "$(DOC)" 
	rm -rf `cat DIRNAME`
	rm -f `cat DIRNAME`.tar
	rm -f `cat DIRNAME`.tar.gz
	mv unix `cat DIRNAME`
	chmod -R a+rX `cat DIRNAME`
	tar -cvf `cat DIRNAME`.tar `cat DIRNAME`
	gzip `cat DIRNAME`.tar
	rm -rf `cat DIRNAME`

winpack:
	sh dosify "$(SRC)" "$(INCL)" "$(DOC)" "$(TS)" "$(TD)" "$(SINC)"
	rm -rf `cat WINDIR`
	rm -f `cat WINDIR`.zip 
	mv dos `cat WINDIR`
	chmod -R a+rX `cat WINDIR`
	find ./`cat WINDIR` '!' -name '*.gif' -print | zip -l `cat WINDIR` -@
	find ./`cat WINDIR` -name '*.gif' -print | zip -u `cat WINDIR` -@
	rm -rf `cat WINDIR`


######################################################################
#
#  config wizard related stuff
#
######################################################################

WO1 = FFT.o  GetTime.o GetPID.o ctools.o ZZ.o ZZVec.o ZZ_p.o ZZ_pX.o
WO2 = $(WO1) ZZ_pX1.o lip.o tools.o vec_ZZ.o vec_ZZ_p.o 
WO3 = $(WO2) GF2.o WordVector.o vec_GF2.o GF2X.o GF2X1.o thread.o BasicThreadPool.o fileio.o

WOBJ = $(WO3)

# wntl.a: LCOMP= #LSHAR
wntl.a:	$(WOBJ) 
	$(AR) $(ARFLAGS) wntl.a $(WOBJ)
	- $(RANLIB) wntl.a

MulTimeTest:
	$(LINK) -o MulTimeTest MulTimeTest.cpp wntl.a  $(GMP_OPT_LIBDIR) $(GMP_OPT_LIB)  $(LDLIBS)


Poly1TimeTest:
	$(LINK) -o Poly1TimeTest Poly1TimeTest.cpp wntl.a  $(GMP_OPT_LIBDIR) $(GMP_OPT_LIB) $(LDLIBS)
Poly2TimeTest:
	$(LINK) -o Poly2TimeTest Poly2TimeTest.cpp wntl.a  $(GMP_OPT_LIBDIR) $(GMP_OPT_LIB) $(LDLIBS)
Poly3TimeTest:
	$(LINK) -o Poly3TimeTest Poly3TimeTest.cpp wntl.a  $(GMP_OPT_LIBDIR) $(GMP_OPT_LIB) $(LDLIBS)


GF2XTimeTest:
	$(LINK) -o GF2XTimeTest GF2XTimeTest.cpp wntl.a  $(GMP_OPT_LIBDIR) $(GMP_OPT_LIB) $(LDLIBS)

InitSettings:
	$(LINK) -o InitSettings InitSettings.cpp  $(LDLIBS)


DispSettings:
	$(LINK) -o DispSettings DispSettings.cpp $(LDLIBS)




