#
#Copyright (c) 2016, New Jersey Institute of Technology (NJIT)
#All rights reserved.
#Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
#met:
#1. Redistributions of source code must retain the above copyright
#notice, this list of conditions and the following disclaimer.
#2. Redistributions in binary form must reproduce the above copyright
#notice, this list of conditions and the following disclaimer in the
#documentation and/or other materials provided with the distribution.
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
#PARTICULAR PURPOSE ARE DISCLAIMED.
#IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
#ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
#OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#POSSIBILITY OF SUCH DAMAGE.
#

################
# Makefile.test contains all build instructions for making the
# palisade test framework.
################

# define the test target. For some reason this needs to be defined
# first to work
TEST_TARGET := test/bin/tests$(EXESUFFIX)

LIB_OBJECTS := $(EXTLIBDIR)/$(PALISADELIB) 

#this is the actual target that gets called when make is executed
#(part of all in Makefile) it makes the test library, actual palisade
#tests

# the following are the directories associated with the test system 
TEST_SRC_DIR := test/src
TEST_BUILD_DIR := test/build
TEST_TARGETDIR := test/bin
TEST_TARGET := test/bin/tests$(EXESUFFIX)

.PHONY:alltesttargets
alltesttargets: make_tests 

make_tests:  $(TEST_TARGET) 

TEST_SOURCES := $(shell find $(TEST_SRC_DIR) -type f -name *.$(SRCEXT))

#define list of objects (1:1 substituion of $(SRCEXT) -->.o for all 
#files in TEST_SRC_DIR) and puts objects in TEST_BUILD_DIR
TEST_OBJECTS := $(patsubst $(TEST_SRC_DIR)/%,$(TEST_BUILD_DIR)/%,$(TEST_SOURCES:.$(SRCEXT)=.o))

-include $(TEST_OBJECTS:.o=.d)

.PRECIOUS: $(TEST_BUILD_DIR)/%
$(TEST_BUILD_DIR)/%.o: $(TEST_SRC_DIR)/%.cpp
	@mkdir -p $(@D)
	@$(CC) -MM $(CPPFLAGS) $(INC) $(patsubst $(TEST_BUILD_DIR)/%,$(TEST_SRC_DIR)/%,$(patsubst %.o,%.cpp,$@)) > $(patsubst %.o,%.d,$@)
	@mv -f $(patsubst %.o,%.d,$@) $(patsubst %.o,%.d.tmp,$@)
	@sed -e 's|.*\.o:|$(TEST_BUILD_DIR)/lib/$*:|' < $(patsubst %.o,%.d.tmp,$@) > $(patsubst %.o,%.d,$@)
	@rm -f $(patsubst %.o,%.d.tmp,$@)
	$(CC) -fPIC $(CPPFLAGS) $(INC) -c -o $@ $(patsubst $(TEST_BUILD_DIR)/%,$(TEST_SRC_DIR)/%,$(patsubst %.o,%.cpp,$@))

# library strings needed in linking of TEST_TARGET
#note this could be replaced with $(LIB)
TEST_LIB := -lpthread -lgomp #-lblas#-lmongoclient -L lib -lboost_thread-mt -lboost_filesystem-mt -lboost_system-mt

#
# the following define the componenets of the google test library
# the source extention
TEST_LIB_SRCEXT := cc

#the source directory of the google library sources
TEST_LIB_SRCDIR := test/include/gtest

#this assembles a list of the sources 
TEST_LIB_SOURCES := $(shell find $(TEST_LIB_SRCDIR) -type f -name *.$(TEST_LIB_SRCEXT))
# and a corrresponding list of the obj files
TEST_LIB_OBJECTS := $(patsubst $(TEST_LIB_SRCDIR)/%,$(TEST_BUILD_DIR)/%,$(TEST_LIB_SOURCES:.$(TEST_LIB_SRCEXT)=.o))

# Google Test headers. 
GTEST_HEADERS =	test/include/gtest/gtest.h

# this builds objects from sources in the test library source directory
$(TEST_BUILD_DIR)/%.o: $(TEST_LIB_SRCDIR)/%.$(TEST_LIB_SRCEXT)
	@echo " -- test:compiling $@"
	@mkdir -p $(@D)
	$(CC) $(CPPFLAGS) $(INC) $(TEST_LIB) -c -o $@ $<
	@echo " -- test:archiving $@"
	ar -rv $(TEST_BUILD_DIR)/libgtest.a $@
	@echo 

# this links test executable  from objects in the test build directory
$(TEST_TARGET): $(TEST_OBJECTS) $(TEST_LIB_OBJECTS) $(LIB_OBJECTS)
	@mkdir -p $(TEST_TARGETDIR)
	$(CC) $^ $(TEST_LIB) $(TEST_BUILD_DIR)/libgtest.a -o $(TEST_TARGET) ## -pg ##add if using gprof

#used to run tests from make, almost never used
.PHONY: runtests
runtests: $(TEST_TARGET)
	$(TEST_TARGET)

#################
# this target lets us see what all the strings are defined as, as an
# aid to debugging the Makefile.test. Just run make
# docteststrings
.PHONY: docteststrings
docteststrings:
	@echo 'the following make strings are defined in Makefile.test'
	@echo 'TEST_TARGET $(TEST_TARGET)'
	@echo 'TEST_OBJECTS $(TEST_OBJECTS)'
	@echo 'TEST_SOURCES $(TEST_SOURCES)'
	@echo 'TEST_LIB_OBJECTS $(TEST_LIB_OBJECTS)'
	@echo 'LIB_OBJECTS $(LIB_OBJECTS)'
	@echo 'TEST_LIB_SRCEXT $(TEST_LIB_SRCEXT)'
	@echo 'TEST_LIB_SRCDIR $(TEST_LIB_SRCDIR)'
	@echo 'TEST_LIB_SOURCES $(TEST_LIB_SOURCES)'
	@echo 'TEST_LIB_OBJECTS $(TEST_LIB_OBJECTS)'
	@echo 'TEST_SRC_DIR $(TEST_SRC_DIR)'
	@echo 'TEST_BUILD_DIR $(TEST_BUILD_DIR)'
	@echo 'INC $(INC)'
	@echo 'LIB $(LIB)'

#this target is used to cleanup, it is called from the top Makefile
.PHONEY: cleantests
cleantests:
	@echo " Cleaning test...";
	$(RM) -rf $(TEST_BUILD_DIR) $(TEST_TARGETDIR)
