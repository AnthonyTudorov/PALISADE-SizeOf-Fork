//LAYER 3 : CRYPTO DATA STRUCTURES AND OPERATIONS
/*
PRE SCHEME PROJECT, Crypto Lab, NJIT
Version: 
	v00.01 
Last Edited: 
	6/14/2015 5:37AM
List of Authors:
	TPOC: 
		Dr. Kurt Rohloff, rohloff@njit.edu
	Programmers:
		Dr. Yuriy Polyakov, polyakov@njit.edu
		Gyana Sahu, grs22@njit.edu
Description:	
	This code provides the core proxy re-encryption functionality.

All rights retained by NJIT.  Our intention is to release this software as an open-source library under a license comparable in spirit to BSD, Apache or MIT.

This software is being provided as an alpha-test version.  This software has not been audited or externally verified to be correct.  NJIT makes no guarantees or assurances about the correctness of this software.  This software is not ready for use in safety-critical or security-critical applications.
*/

#include "lwepre.h"

namespace lbcrypto {

//Function to generate 1..log(q) encryptions for each bit of the original private key
template <class T,class P>
bool LP_Algorithm_PRE_LWE_NTRU<T,P>::ProxyGen(const LP_PublicKey<Element,ElementParams> &newPublicKey, 
				LP_PrivateKey<Element,ElementParams> &origPrivateKey,
				DiscreteGaussianGenerator &dgg, usint relinWindow, std::vector<T> *evalKey) const
{
	const LP_CryptoParameters<Element,ElementParams> &cryptoParams = newPublicKey.GetAbstractCryptoParameters();
	const ElementParams &elementParams = cryptoParams.GetElementParams();
	const BigBinaryInteger &p = cryptoParams.GetPlaintextModulus();
	const Element &f = origPrivateKey.GetPrivateElement();
	const Element &hn = newPublicKey.GetPublicElement();

	usint nBits = elementParams.GetModulus().GetLengthForBase(p.ConvertToInt());

	usint nWindows = nBits / relinWindow;
	if (nBits % relinWindow > 0)
		nWindows++;

	for(usint i = 0; i < nWindows; ++i)
	{
		Element s(dgg,elementParams);
		Element e(dgg,elementParams);

		BigBinaryInteger pI(p.ModExp(intToBigBinaryInteger(i*relinWindow),elementParams.GetModulus()));
		evalKey->push_back( hn*s + p*e + pI*f );
	}

	return true;
}
			
//Function for re-encypting ciphertext using the array generated by ProxyGen
template <class T,class P>
void LP_Algorithm_PRE_LWE_NTRU<T, P>::ReEncrypt(const std::vector<Element> &proxy,
	const LP_CryptoParameters<Element, ElementParams> &cryptoParams,
	usint relinWindow,
	const Element &ciphertext, 
	Element *newCiphertext) const
{
	const ElementParams &elementParams = cryptoParams.GetElementParams();
	const BigBinaryInteger &p = cryptoParams.GetPlaintextModulus();

	Element c(ciphertext);
	Element ctDigit(elementParams);

	//convert ciphertext to coefficient format
	c.SwitchFormat();

	int nBits = elementParams.GetModulus().GetLengthForBase(p.ConvertToInt());
	usint nWindows = nBits / relinWindow;
	if (nBits % relinWindow > 0)
		nWindows++;

	ctDigit = c.GetDigitAtIndexForBase(1,1<<relinWindow);
	ctDigit.SwitchFormat();

	Element ct(ctDigit*proxy[0]);

	for(usint i = 1; i < nWindows; ++i)
	{
		ctDigit = c.GetDigitAtIndexForBase(i*relinWindow + 1, 1<<relinWindow);
		ctDigit.SwitchFormat();
		ct += ctDigit*proxy[i];
	}

	*newCiphertext = ct;

}

}  // namespace lbcrypto ends
