/**
 * @file
 * @author  TPOC: Dr. Kurt Rohloff <rohloff@njit.edu>,
 *	Programmers: Dr. Yuriy Polyakov, <polyakov@njit.edu>, Gyana Sahu <grs22@njit.edu>
 * @version 00_03
 *
 * @section LICENSE
 *
 * All rights retained by NJIT.  Our intention is to release this software as an open-source library under a license comparable in spirit to BSD, Apache or MIT.
 *
 * This software is being provided as an alpha-test version.  This software has not been audited or externally verified to be correct.  NJIT makes no guarantees or assurances about the correctness of this software.  This software is not ready for use in safety-critical or security-critical applications.
 *
 * @section DESCRIPTION
 *
 * This code provides the core proxy re-encryption functionality.
 */

#ifndef LBCRYPTO_LWEPRE_H
#define LBCRYPTO_LWEPRE_H

//Includes Section
#include "pubkeylp.h"
#include "inttypes.h"
#include "lwecrypt.h"

/**
 * @namespace lbcrypto
 * The namespace of lbcrypto
 */
namespace lbcrypto {

	/**
	 * @brief Template for crypto PRE.
	 * @tparam T a ring element.
	 * @tparam P a set of element parameters.
	 */
	template <class T, class P>
	class LPAlgorithmPRELWENTRU : public LPAlgorithmLWENTRU<T,P>, public LPPREAlgorithm<T,P> {
		public:
			typedef T Element;
			typedef P ElementParams;

			/**
			 * Virtual function to generate 1..log(q) encryptions for each bit of the original private key
			 *
			 * @param &newPublicKey encryption key for the new ciphertext.
			 * @param &origPrivateKey original private key used for decryption.
			 * @param &dg discrete Gaussian generator.
			 * @return the re-encryption key.
			 */
			 bool ProxyGen(const LPPublicKey<Element,ElementParams> &newPublicKey, 
				LPPrivateKey<Element,ElementParams> &origPrivateKey,
				DiscreteGaussianGenerator &ddg, usint relinWindow, std::vector<Element> *evalKey) const;
			
			/**
			 * Virtual function to define the interface for re-encypting ciphertext using the array generated by ProxyGen
			 *
			 * @param &proxyGen proxy re-encryption key.
			 * @param &params re-ecryption parameters.
			 * @param &ciphertext the input ciphertext.
			 * @param *newCiphertext the new ciphertext.
			 */
			void ReEncrypt(const std::vector<Element> &evalKey,
				const LPCryptoParameters<Element,ElementParams> &params,
				usint relinWindow,
				const Element &ciphertext, 
				Element *newCiphertext) const;
	};

} // namespace lbcrypto ends
#endif
